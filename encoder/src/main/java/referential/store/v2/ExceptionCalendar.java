/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package referential.store.v2;  
@SuppressWarnings("all")
/** Exception in the Calendar */
@org.apache.avro.specific.AvroGenerated
public class ExceptionCalendar extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ExceptionCalendar\",\"namespace\":\"referential.store.v2\",\"doc\":\"Exception in the Calendar\",\"fields\":[{\"name\":\"dateKey\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Date of the day, iso 8601 extended deprecated yyyy-MM-dd use yyyyMMdd\",\"default\":null},{\"name\":\"statusCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Code status\",\"default\":null},{\"name\":\"eventTypeCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Event type code\",\"default\":null},{\"name\":\"eventDesc\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Event Description\",\"default\":null},{\"name\":\"dayTimeRanges\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"TimeRange\",\"doc\":\"Range of time\",\"fields\":[{\"name\":\"begTime\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Beginning time\",\"default\":null},{\"name\":\"endTime\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Ending Time\",\"default\":null}]}}],\"doc\":\"Time ranges for this Day\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Date of the day, iso 8601 extended deprecated yyyy-MM-dd use yyyyMMdd */
  @Deprecated public java.lang.String dateKey;
  /** Code status */
  @Deprecated public java.lang.String statusCode;
  /** Event type code */
  @Deprecated public java.lang.String eventTypeCode;
  /** Event Description */
  @Deprecated public java.lang.String eventDesc;
  /** Time ranges for this Day */
  @Deprecated public java.util.List<referential.store.v2.TimeRange> dayTimeRanges;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public ExceptionCalendar() {}

  /**
   * All-args constructor.
   */
  public ExceptionCalendar(java.lang.String dateKey, java.lang.String statusCode, java.lang.String eventTypeCode, java.lang.String eventDesc, java.util.List<referential.store.v2.TimeRange> dayTimeRanges) {
    this.dateKey = dateKey;
    this.statusCode = statusCode;
    this.eventTypeCode = eventTypeCode;
    this.eventDesc = eventDesc;
    this.dayTimeRanges = dayTimeRanges;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return dateKey;
    case 1: return statusCode;
    case 2: return eventTypeCode;
    case 3: return eventDesc;
    case 4: return dayTimeRanges;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: dateKey = (java.lang.String)value$; break;
    case 1: statusCode = (java.lang.String)value$; break;
    case 2: eventTypeCode = (java.lang.String)value$; break;
    case 3: eventDesc = (java.lang.String)value$; break;
    case 4: dayTimeRanges = (java.util.List<referential.store.v2.TimeRange>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'dateKey' field.
   * Date of the day, iso 8601 extended deprecated yyyy-MM-dd use yyyyMMdd   */
  public java.lang.String getDateKey() {
    return dateKey;
  }

  /**
   * Sets the value of the 'dateKey' field.
   * Date of the day, iso 8601 extended deprecated yyyy-MM-dd use yyyyMMdd   * @param value the value to set.
   */
  public void setDateKey(java.lang.String value) {
    this.dateKey = value;
  }

  /**
   * Gets the value of the 'statusCode' field.
   * Code status   */
  public java.lang.String getStatusCode() {
    return statusCode;
  }

  /**
   * Sets the value of the 'statusCode' field.
   * Code status   * @param value the value to set.
   */
  public void setStatusCode(java.lang.String value) {
    this.statusCode = value;
  }

  /**
   * Gets the value of the 'eventTypeCode' field.
   * Event type code   */
  public java.lang.String getEventTypeCode() {
    return eventTypeCode;
  }

  /**
   * Sets the value of the 'eventTypeCode' field.
   * Event type code   * @param value the value to set.
   */
  public void setEventTypeCode(java.lang.String value) {
    this.eventTypeCode = value;
  }

  /**
   * Gets the value of the 'eventDesc' field.
   * Event Description   */
  public java.lang.String getEventDesc() {
    return eventDesc;
  }

  /**
   * Sets the value of the 'eventDesc' field.
   * Event Description   * @param value the value to set.
   */
  public void setEventDesc(java.lang.String value) {
    this.eventDesc = value;
  }

  /**
   * Gets the value of the 'dayTimeRanges' field.
   * Time ranges for this Day   */
  public java.util.List<referential.store.v2.TimeRange> getDayTimeRanges() {
    return dayTimeRanges;
  }

  /**
   * Sets the value of the 'dayTimeRanges' field.
   * Time ranges for this Day   * @param value the value to set.
   */
  public void setDayTimeRanges(java.util.List<referential.store.v2.TimeRange> value) {
    this.dayTimeRanges = value;
  }

  /** Creates a new ExceptionCalendar RecordBuilder */
  public static referential.store.v2.ExceptionCalendar.Builder newBuilder() {
    return new referential.store.v2.ExceptionCalendar.Builder();
  }
  
  /** Creates a new ExceptionCalendar RecordBuilder by copying an existing Builder */
  public static referential.store.v2.ExceptionCalendar.Builder newBuilder(referential.store.v2.ExceptionCalendar.Builder other) {
    return new referential.store.v2.ExceptionCalendar.Builder(other);
  }
  
  /** Creates a new ExceptionCalendar RecordBuilder by copying an existing ExceptionCalendar instance */
  public static referential.store.v2.ExceptionCalendar.Builder newBuilder(referential.store.v2.ExceptionCalendar other) {
    return new referential.store.v2.ExceptionCalendar.Builder(other);
  }
  
  /**
   * RecordBuilder for ExceptionCalendar instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ExceptionCalendar>
    implements org.apache.avro.data.RecordBuilder<ExceptionCalendar> {

    private java.lang.String dateKey;
    private java.lang.String statusCode;
    private java.lang.String eventTypeCode;
    private java.lang.String eventDesc;
    private java.util.List<referential.store.v2.TimeRange> dayTimeRanges;

    /** Creates a new Builder */
    private Builder() {
      super(referential.store.v2.ExceptionCalendar.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(referential.store.v2.ExceptionCalendar.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.dateKey)) {
        this.dateKey = data().deepCopy(fields()[0].schema(), other.dateKey);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.statusCode)) {
        this.statusCode = data().deepCopy(fields()[1].schema(), other.statusCode);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.eventTypeCode)) {
        this.eventTypeCode = data().deepCopy(fields()[2].schema(), other.eventTypeCode);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.eventDesc)) {
        this.eventDesc = data().deepCopy(fields()[3].schema(), other.eventDesc);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.dayTimeRanges)) {
        this.dayTimeRanges = data().deepCopy(fields()[4].schema(), other.dayTimeRanges);
        fieldSetFlags()[4] = true;
      }
    }
    
    /** Creates a Builder by copying an existing ExceptionCalendar instance */
    private Builder(referential.store.v2.ExceptionCalendar other) {
            super(referential.store.v2.ExceptionCalendar.SCHEMA$);
      if (isValidValue(fields()[0], other.dateKey)) {
        this.dateKey = data().deepCopy(fields()[0].schema(), other.dateKey);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.statusCode)) {
        this.statusCode = data().deepCopy(fields()[1].schema(), other.statusCode);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.eventTypeCode)) {
        this.eventTypeCode = data().deepCopy(fields()[2].schema(), other.eventTypeCode);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.eventDesc)) {
        this.eventDesc = data().deepCopy(fields()[3].schema(), other.eventDesc);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.dayTimeRanges)) {
        this.dayTimeRanges = data().deepCopy(fields()[4].schema(), other.dayTimeRanges);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'dateKey' field */
    public java.lang.String getDateKey() {
      return dateKey;
    }
    
    /** Sets the value of the 'dateKey' field */
    public referential.store.v2.ExceptionCalendar.Builder setDateKey(java.lang.String value) {
      validate(fields()[0], value);
      this.dateKey = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'dateKey' field has been set */
    public boolean hasDateKey() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'dateKey' field */
    public referential.store.v2.ExceptionCalendar.Builder clearDateKey() {
      dateKey = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'statusCode' field */
    public java.lang.String getStatusCode() {
      return statusCode;
    }
    
    /** Sets the value of the 'statusCode' field */
    public referential.store.v2.ExceptionCalendar.Builder setStatusCode(java.lang.String value) {
      validate(fields()[1], value);
      this.statusCode = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'statusCode' field has been set */
    public boolean hasStatusCode() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'statusCode' field */
    public referential.store.v2.ExceptionCalendar.Builder clearStatusCode() {
      statusCode = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'eventTypeCode' field */
    public java.lang.String getEventTypeCode() {
      return eventTypeCode;
    }
    
    /** Sets the value of the 'eventTypeCode' field */
    public referential.store.v2.ExceptionCalendar.Builder setEventTypeCode(java.lang.String value) {
      validate(fields()[2], value);
      this.eventTypeCode = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'eventTypeCode' field has been set */
    public boolean hasEventTypeCode() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'eventTypeCode' field */
    public referential.store.v2.ExceptionCalendar.Builder clearEventTypeCode() {
      eventTypeCode = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'eventDesc' field */
    public java.lang.String getEventDesc() {
      return eventDesc;
    }
    
    /** Sets the value of the 'eventDesc' field */
    public referential.store.v2.ExceptionCalendar.Builder setEventDesc(java.lang.String value) {
      validate(fields()[3], value);
      this.eventDesc = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'eventDesc' field has been set */
    public boolean hasEventDesc() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'eventDesc' field */
    public referential.store.v2.ExceptionCalendar.Builder clearEventDesc() {
      eventDesc = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'dayTimeRanges' field */
    public java.util.List<referential.store.v2.TimeRange> getDayTimeRanges() {
      return dayTimeRanges;
    }
    
    /** Sets the value of the 'dayTimeRanges' field */
    public referential.store.v2.ExceptionCalendar.Builder setDayTimeRanges(java.util.List<referential.store.v2.TimeRange> value) {
      validate(fields()[4], value);
      this.dayTimeRanges = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'dayTimeRanges' field has been set */
    public boolean hasDayTimeRanges() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'dayTimeRanges' field */
    public referential.store.v2.ExceptionCalendar.Builder clearDayTimeRanges() {
      dayTimeRanges = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public ExceptionCalendar build() {
      try {
        ExceptionCalendar record = new ExceptionCalendar();
        record.dateKey = fieldSetFlags()[0] ? this.dateKey : (java.lang.String) defaultValue(fields()[0]);
        record.statusCode = fieldSetFlags()[1] ? this.statusCode : (java.lang.String) defaultValue(fields()[1]);
        record.eventTypeCode = fieldSetFlags()[2] ? this.eventTypeCode : (java.lang.String) defaultValue(fields()[2]);
        record.eventDesc = fieldSetFlags()[3] ? this.eventDesc : (java.lang.String) defaultValue(fields()[3]);
        record.dayTimeRanges = fieldSetFlags()[4] ? this.dayTimeRanges : (java.util.List<referential.store.v2.TimeRange>) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
